关系型数据库（RDB）
	BLOB存储、XML/文档存储、全文检索、在数据库中执行代码、使用星形数据结构的数据仓库、以及地理空间扩展
	关系型数据库围绕着ACID（原子性Atomicity、一致性Consistency、隔离性Isolation和持久性Durability)的概念而建立，实现ACID最简单的方法就是把一切保持在单机上。
	直到互联网带来的负载大到单机无法处理。这迫使工程师们想出巧妙的技术来克服单机的限制。有许多不同的方法，各有其优缺点：主―副、集群、表联合与分区（table federation and partitioning）、水平分区（sharding，可以认为是分区的特例）
	在 本系列的第一部分，我探讨了冗余在实现高可用性中所起的作用。不过，当应用到数据存储层时，冗余带来了一系列新的有趣的挑战。在数据库层应用冗余最常用的方式是主／副配置。
	总而言之，当数据存储被复制（也称为分隔（partitioned））时，系统的状态被分散。这意味着我们离开了舒适的ACID领域，进入CAP的美丽新世界。
	CAP理论是由加州伯克利分校的Eric Brewer博士在2000年提出的。它最简单的形式是这样的：一个分布式系统必须在一致性、可用性和分隔容忍度（Partition Tolerance）之间取舍，并且只能做到三者中的两者。 
	许多现代数据存储的常见模式 
	提供的性能/规模和可用性良好搭配的一种常见方法，是结合分隔和复制形成一种配置（或者说是模式）。这有时被称为分隔的副本集合（partitioned replica set）。 
	分隔的副本集合的一些共同特征：
		数据是跨多个节点（或者多个节点集群）分隔的（即，分开的）。没有单一分区拥有所有的数据。单个写操作只发送到一个分区。多个写操作有可能发送到多个分区，因此应当彼此独立。复杂的、事务性、多条记录（因此可能涉及多分区）的写操作应当避免，因为这样可能影响整个系统。
		单个分区能够处理的最大数据量可能成为潜在的瓶颈。如果一个分区达到它的带宽上限，增加更多的分区以及拆分横跨其间的流量，有助于解决该问题。因此，可以通过增加更多的分区来扩展这种类型的系统。
		一个分区的索引（key）用来分配各个分区的数据。你需要小心选择分区的索引，这样让读操作和写操作尽可能平均“分布”在所有的分区。如果读／写操作发生聚集，这些操作可能超出某个分区的带宽，进而影响整个系统的性能，而其它分区则并未充分利用。这被称为“热分区”问题。
		数据在多台主机之间复制。这可以是，每个分区是完全分开的副本集合，或者在同一组主机之上的多个副本集合。一条数据被复制的次数通常被称为复制因子。
		这样的配置拥有内置的高可用性：数据被复制到多个主机。理论上，若干小于复制因子数量的主机发生故障，不会影响整个系统的可用性。
		我们可以使用下面的组合：
			高性能摄入队列，来获取输入点击流量
			基于Hadoop的点击流量处理系统
			基于云的对象存储，用来低成本、长期地存储经过压缩的日常点击流量摘要
			保存元数据的关系型数据库，可供我们用于充实点击流量的数据
			用于分析的数据仓库集群
			用于自然语言查询的搜索集群
			上面所有这些都可以是某个单一子系统的组成部分，比如叫做网站分析平台。
	
总结
商业化互联网带来扩展和可用性的需求，而RDBMS这样的瑞士军刀再也无法满足这样的需求。
对数据存储增加水平扩展和冗余加大了系统复杂度，使得ACID更加难以保证，迫使我们按照CAP理论考虑取舍，创造了许多优化和专业化的有趣机会。
在系统中使用多个数据存储，每个为与其最适当的工作负载提供服务。
现代数据存储是复杂的系统，要求特殊的知识和管理开销。